# proyecto-progra
from tkinter import * 
from tkinter import font
from tkinter import messagebox as msg
from tkinter import ttk
from tksheet import Sheet

from tkcalendar import Calendar, DateEntry

from Elementos import Articulo_Proveedor
from Elementos import Articulo_ProveedorBO

class Directorio_B: 

    def __init__(self):

        #Pantalla
        self.raiz = Tk()
        self.raiz.title ("Mantenimiento de los Articulos por Proveedor ")
        self.raiz.geometry('680x630') 

        #Barra menu
        menubar = Menu(self.raiz)
        self.raiz.config(menu=menubar)

        filemenu = Menu(menubar, tearoff=0)
        filemenu.add_command(label="Salir", command=self.raiz.quit)

        mantmenu = Menu(menubar, tearoff=0)
        mantmenu.add_command(label="Facturas", command=self.abrir_F)
        mantmenu.add_command(label="Articulos", command=self.abrir_A)
        mantmenu.add_command(label="Proveedores", command=self.abrir_p)

        menubar.add_cascade(label="Archivo", menu=filemenu)
        menubar.add_cascade(label="Mantenimiento", menu=mantmenu)

        #Objecto cliente
        self.fuente = font.Font(weight="bold")
        self.Articulo_Proveedor = Articulo_Proveedor.Articulo_Proveedor()
        self.insertando = True

        #Titulo 
        self.lb_tituloPantalla = Label(self.raiz, text = "MANTENIMIENTO DE ARTICULOS POR PROVEEDOR ", font = self.fuente)
        self.lb_tituloPantalla.place(x = 100, y = 20)

        #Formulario 

        #Cedula
        self.lb_FK_ID_ART = Label(self.raiz, text = "ID Articulo:")
        self.lb_FK_ID_ART.place(x = 100, y = 90)
        self.txt_FK_ID_ART = Entry(self.raiz, textvariable=self.Articulo_Proveedor.FK_ID_ART, justify="right")
        self.txt_FK_ID_ART.place(x = 230, y = 90)

        #Nombre
        self.lb_FK_ID_PROV = Label(self.raiz, text = "ID Proveedor:")
        self.lb_FK_ID_PROV.place(x = 100, y = 120)
        self.txt_FK_ID_PROV = Entry(self.raiz, textvariable=self.Articulo_Proveedor.FK_ID_PROV, justify="right", width=30)
        self.txt_FK_ID_PROV.place(x = 230, y =120)

    

        #Boton Limpiar
        self.bt_borrar = Button(self.raiz, text="Limpiar", width=15, command = self.limpiarInformacion)
        self.bt_borrar.place(x = 70, y = 340)

        #Boton Enviar
        self.bt_enviar = Button(self.raiz, text="Enviar", width=15, command = self.enviarInformacion)
        self.bt_enviar.place(x = 190, y = 340)

        #Boton Cargar
        self.bt_borrar = Button(self.raiz, text="Cargar", width=15, command = self.cargarInformacion)
        self.bt_borrar.place(x = 310, y = 340)

        #Boton Eliminar 
        self.bt_enviar = Button(self.raiz, text="Eliminar", width=15, command = self.eliminarInformacion)
        self.bt_enviar.place(x = 430, y = 340)

        #label del informacion
        self.lb_tituloPantalla = Label(self.raiz, text = "INFORMACIÓN INCLUIDA", font = self.fuente)
        self.lb_tituloPantalla.place(x = 190, y = 400)

        #cuadro excel
        self.sheet = Sheet(self.raiz,
                            page_up_down_select_row = True,
                            column_width = 120,
                            startup_select = (0,1,"rows"),
                            headers = ['ID Articulo', 'ID Proveedor'],
                            height = 170,
                            width = 560
                            )

        self.sheet.enable_bindings(("single_select",
                                         "column_select",
                                         "row_select",
                                         "column_width_resize",
                                         "double_click_column_resize",
                                         "arrowkeys",
                                         "row_height_resize",
                                         "double_click_row_resize",
                                         "right_click_popup_menu",
                                         "rc_select",
                                         "rc_insert_column",
                                         "rc_delete_column",
                                         "rc_insert_row",
                                         "rc_delete_row"))

        self.sheet.place(x = 20, y = 440)

        #toda informacion
        self.cargarTodaInformacion()
       
        #cierre de raiz
        self.raiz.mainloop()

    

    #Limpiar
    def limpiarInformacion(self):
        self.Articulo_Proveedor.limpiar()
        msg.showinfo("Acción del sistema", "La información del formulario ha sido eliminada correctamente")

    #envia la info
    def enviarInformacion(self):
        try:
            self.Articulo_ProveedorBo = Articulo_ProveedorBO.Articulo_ProveedorBO() 
            if(self.insertando == True):
                self.Articulo_ProveedorBo.guardar(self.Articulo_Proveedor)
            else:
                self.Articulo_ProveedorBo.modificar(self.Articulo_Proveedor)
            
            self.cargarTodaInformacion()
            self.insertando = True
            self.Articulo_Proveedor.limpiar() 

            if(self.insertando == True):
                msg.showinfo("Acción: Agregar cliente", "La información del articulo ha sido incluida correctamente") 
            else:
                msg.showinfo("Acción: modificar cliente", "La información del articulo ha sido modificada correctamente") 
        except Exception as e: 
            msg.showerror("Error",  str(e))
    
    #eliminar la info
    def eliminarInformacion(self):
        try:
            datoSeleccionado = self.sheet.get_currently_selected()
            FK_ID_ART = (self.sheet.get_cell_data(datoSeleccionado[0],0))
            FK_ID_PROV = (self.sheet.get_cell_data(datoSeleccionado[0],1))

            resultado = msg.askquestion("Eliminar",  "¿Desear eliminar a "+FK_ID_PROV+" de la base de datos?")
            if resultado == "yes":
                self.Articulo_Proveedor.FK_ID_ART.set(FK_ID_ART)
                self.Articulo_ProveedorBo = Articulo_ProveedorBO.Articulo_ProveedorBO() 
                self.Articulo_ProveedorBo.eliminar(self.Articulo_Proveedor) 
                self.Articulo_Proveedor.limpiar()
        except Exception as e: 
            msg.showerror("Error",  str(e)) 
            
        self.cargarTodaInformacion() #refrescar la pagina especialmente para llaves foraneas relacionales 

    #cargar toda la info
    def cargarTodaInformacion(self):
        try:
            self.Articulo_ProveedorBo = Articulo_ProveedorBO.Articulo_ProveedorBO() 
            resultado = self.Articulo_ProveedorBo.consultar()

            self.sheet.set_sheet_data(resultado)
        except Exception as e: 
            msg.showerror("Error",  str(e))

    #selecionado
    def cargarInformacion(self):
        try:
            datoSeleccionado = self.sheet.get_currently_selected()
            FK_ID_ART = (self.sheet.get_cell_data(datoSeleccionado[0],0))
            self.Articulo_Proveedor.FK_ID_ART.set(FK_ID_ART)
            self.Articulo_ProveedorBo = Articulo_ProveedorBO.Articulo_ProveedorBO() 
            self.Articulo_ProveedorBo.consultarArticulo_Proveedor(self.Articulo_Proveedor) 
            self.insertando = False
            msg.showinfo("Acción: Consultar articulo por proveedor", "La información del articulo ha sido consultada correctamente") 
            
        except Exception as e: 
            msg.showerror("Error",  str(e))

    #abrir  
    def abrir_F(self):
        from mant_Factura import Directorio_F
        self.raiz.destroy()
        Directorio_F()

    def abrir_A(self):
        from mant_Articulos import Directorio_A
        self.raiz.destroy()
        Directorio_A() 
    
    def abrir_p(self):
        from mant_Proveedor import Directorio_P
        self.raiz.destroy()
        Directorio_P()

def main():
    Directorio_B()
    return 0

if __name__ == "__main__": 
    main()
